; Chip config
.EQU	RC_CLOCK_CALIBRATE	=	0x3D
.EQU	FOSC			=	8000000

; App config
#define	SYSCLK_SCALE	(8)
#if SYSCLK_SCALE == 1
	.EQU	SYSCLK_SCALER	=	0x00
#elif SYSCLK_SCALE == 2
	.EQU	SYSCLK_SCALER	=	0x01
#elif SYSCLK_SCALE == 4
	.EQU	SYSCLK_SCALER	=	0x02
#elif SYSCLK_SCALE == 8
	.EQU	SYSCLK_SCALER	=	0x03
#elif SYSCLK_SCALE == 16
	.EQU	SYSCLK_SCALER	=	0x04
#elif SYSCLK_SCALE == 32
	.EQU	SYSCLK_SCALER	=	0x05
#elif SYSCLK_SCALE == 64
	.EQU	SYSCLK_SCALER	=	0x06
#elif SYSCLK_SCALE == 128
	.EQU	SYSCLK_SCALER	=	0x07
#elif SYSCLK_SCALE == 256
	.EQU	SYSCLK_SCALER	=	0x08
#else
	#ERROR "TIME SCALE NOt SUPPORT"
#endif

#define	BAUD	(2400)
.EQU	USART_SCALE		=	FOSC/SYSCLK_SCALE/16/BAUD-1


; Interrupt vector
.ORG	0x0000	JMP	VEC_RESET		;Not used due to bootloader
.ORG	0x0002	JMP	VEC_EXT_INT0
.ORG	0x0004	JMP	VEC_EXT_INT1
.ORG	0x0006	JMP	VEC_PCINT0
.ORG	0x0008	JMP	VEC_PCINT1
.ORG	0x000A	JMP	VEC_PCINT2
.ORG	0x000C	JMP	VEC_WDT
.ORG	0x000E	JMP	VEC_TIM2_COMPA
.ORG	0x0010	JMP	VEC_TIM2_COMPB
.ORG	0x0012	JMP	VEC_TIM2_OVF
.ORG	0x0014	JMP	VEC_TIM2_CAPT
.ORG	0x0016	JMP	VEC_TIM1_COMPA
.ORG	0x0018	JMP	VEC_TIM1_COMPB
.ORG	0x001A	JMP	VEC_TIM1_OVF
.ORG	0x001C	JMP	VEC_TIM0_COMPA
.ORG	0x001E	JMP	VEC_TIM0_COMPB
.ORG	0x0020	JMP	VEC_TIM0_OVF
.ORG	0x0022	JMP	VEC_SPI_STC
.ORG	0x0024	JMP	VEC_USART_RXC
.ORG	0x0026	JMP	VEC_USART_UDRE
.ORG	0x0028	JMP	VEC_USART_TXC
.ORG	0x002A	JMP	VEC_ADC
.ORG	0x002C	JMP	VEC_EE_RDY
.ORG	0x002E	JMP	VEC_ANA_COMP
.ORG	0x0030	JMP	VEC_TWI
.ORG	0x0032	JMP	VEC_SPM_RDY


; External functions
#include "func_usart.inc"
#include "func_spi.inc"


; App program ----------------------------------------------

; Unused vector
;VEC_RESET:
VEC_EXT_INT0:
VEC_EXT_INT1:
VEC_PCINT0:
VEC_PCINT1:
VEC_PCINT2:
VEC_WDT:
VEC_TIM2_COMPA:
VEC_TIM2_COMPB:
VEC_TIM2_OVF:
VEC_TIM2_CAPT:
VEC_TIM1_COMPA:
VEC_TIM1_COMPB:
VEC_TIM1_OVF:
VEC_TIM0_COMPA:
VEC_TIM0_COMPB:
VEC_TIM0_OVF:
VEC_SPI_STC:
;VEC_USART_RXC:
VEC_USART_UDRE:
VEC_USART_TXC:
VEC_ADC:
VEC_EE_RDY:
VEC_ANA_COMP:
VEC_TWI:
VEC_SPM_RDY:


; Config MCU
VEC_RESET:
INI:
	;Setup SP
	LDI	R16, HIGH(RAMEND)
	OUT	SPH, R16
	LDI	R16, LOW(RAMEND)
	OUT	SPL, R16

	;Setup interrupt mode
;	LDI	R16, 0x02
;	OUT	MCUCR, R16
;	LDI	R16, 0x01
;	OUT	MCUCR, R16

	;Calibrate clock and set pre-scaler
	LDI	R16, RC_CLOCK_CALIBRATE
	STS	OSCCAL, R16

	LDI	R16, 0x80
	STS	CLKPR, R16
	LDI	R16, SYSCLK_SCALER
	STS	CLKPR, R16

	;Setup pin direction
	LDI	R16, 0b11111100			;PD =	Out	Out	Out	Out	Out	Out	Tx	Rx
	OUT	DDRD, R16
	LDI	R16, 0b11111100
	OUT	PORTD, R16

	LDI	R16, 0b00000000			;PC =	X	RESET	SCL	SDA	In-ADC	In-ADc	In-ADC	In-ADC
	OUT	DDRC, R16
	LDI	R16, 0b00000000
	OUT	PORTC, R16

	LDI	R16, 0b00101111			;PB =	In	In	SCK	SPI-SDI	SPI-SDO	Out(SS)	Out(SS)	Out(SS)
	OUT	DDRB, R16
	LDI	R16, 0b00000111
	OUT	PORTB, R16

	;Setup USART communication with operator-side controller
	LDI	R16, HIGH(USART_SCALE)
	STS	UBRR0H, R16
	LDI	R16, LOW(USART_SCALE)
	STS	UBRR0L, R16
	LDI	R16, 0b10011000			;Enable Tx/Rx and Rx interrupt, 8 bits data
	STS	UCSR0B, R16
	LDI	R16, 0b00001110			;Async USART (UART), no parity, 2 stop bits, 8 bits data
	STS	UCSR0C, R16

	;Setup SPI
	LDI	R16, 0b01010011			;No interrupt, SPI enable, MSB first, as masrter, mode0, 1/128 speed
	OUT	SPCR, R16


	SEI					;Ini done, enable interrupt


; Main function
MAIN:	
	JMP	MAIN

	CBI	PORTB, 1			;Pull down SS, address = 010
	
	LDI	R16, 0b10011010
	OUT	SPDR, R16			;Write to SPI buffer
	func_spi_sendchar_finish:
	IN	R16, SPSR			;Busy wait SPI to be fully send out
	SBRS	R16, SPIF
	JMP	func_spi_sendchar_finish
;	CALL	FUNC_SPI_SENDCHAR
	
;	SBI	PORTB, 1
	JMP	END

	LDI	R16, 0b11111111			;Send data via SPI
	CALL	FUNC_SPI_SENDCHAR
	
;	LDI	R16, '2'
;	CALL	FUNC_USATR_SENDCHAR

	LDI	R16, 0b11111111
	CALL	FUNC_SPI_SENDCHAR
	
;	LDI	R16, '1'
;	CALL	FUNC_USATR_SENDCHAR

	LDI	R16, 0b11111111
	CALL	FUNC_SPI_SENDCHAR
	
;	LDI	R16, '0'
;	CALL	FUNC_USATR_SENDCHAR

	SBI	PORTB, 1			;Unselect SPI slave
	
	LDI	R16, 'E'
	CALL	FUNC_USATR_SENDCHAR

; End of app
END:
	JMP	END

	

VEC_USART_RXC:
	LDS	R16, UDR0
	MOV	R15, R16
	CALL	FUNC_USATR_SENDCHAR

	CBI	PORTB, 1			;Pull down SS, address = 010
	
	MOV	R16, R15
;	CALL	FUNC_SPI_SENDCHAR
	OUT	SPDR, R16			;Write to SPI buffer
	func_spi_sendchar_finish2:
	IN	R16, SPSR			;Busy wait SPI to be fully send out
	SBRS	R16, SPIF
	JMP	func_spi_sendchar_finish2
	
	MOV	R16, R15
;	CALL	FUNC_SPI_SENDCHAR
	OUT	SPDR, R16			;Write to SPI buffer
	func_spi_sendchar_finish1:
	IN	R16, SPSR			;Busy wait SPI to be fully send out
	SBRS	R16, SPIF
	JMP	func_spi_sendchar_finish1
	
	MOV	R16, R15
;	CALL	FUNC_SPI_SENDCHAR
	OUT	SPDR, R16			;Write to SPI buffer
	func_spi_sendchar_finish0:
	IN	R16, SPSR			;Busy wait SPI to be fully send out
	SBRS	R16, SPIF
	JMP	func_spi_sendchar_finish0
	
	SBI	PORTB, 1
	
	RETI
